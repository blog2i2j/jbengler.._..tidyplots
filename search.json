[{"path":"https://jbengler.github.io/tidyplots/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Jan Broder Engler Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://jbengler.github.io/tidyplots/articles/Visualizing-data.html","id":"distributions","dir":"Articles","previous_headings":"","what":"Distributions","title":"Visualizing Data","text":"","code":"energy %>%    tidyplot(x = power_in_gw) %>%    add_histogram() energy %>%    tidyplot(x = power_in_gw) %>%    add_density_curve() energy %>%    tidyplot(x = power_in_gw) %>%    add_density_curve() %>%    add_density_histogram() # multiple distributions  energy %>%    tidyplot(x = energy_type, y = power_in_gw, color = energy_type, fill = energy_type) %>%    add_violin() %>%    style_rotate_labels() energy %>%    tidyplot(x = energy_type, y = power_in_gw, color = energy_type, fill = energy_type) %>%    add_jitter(jitter_width = 0.8, alpha = 0.3) %>%    style_rotate_labels() energy %>%    tidyplot(x = energy_type, y = power_in_gw, color = energy_type, fill = energy_type) %>%    add_violin() %>%    add_jitter(jitter_width = 0.8, alpha = 0.3) %>%    style_rotate_labels()"},{"path":"https://jbengler.github.io/tidyplots/articles/Visualizing-data.html","id":"proportions","dir":"Articles","previous_headings":"","what":"Proportions","title":"Visualizing Data","text":"","code":"energy %>%    tidyplot(Year, power_in_gw, fill = energy_source) %>%    add_barstack_absolute(bar_width = 0.8) %>%    adjust_size(80, 60) energy %>%    tidyplot(Year, power_in_gw, fill = energy_source) %>%    add_barstack_relative() %>%    adjust_size(80, 60) energy %>%    filter(Year %in% c(2005, 2010, 2015, 2020)) %>%    tidyplot(y = power_in_gw, fill = energy_source) %>%    add_pie() %>%    split_plot(by = Year) energy %>%    filter(Year %in% c(2005, 2010, 2015, 2020)) %>%    tidyplot(y = power_in_gw, fill = energy_source) %>%    add_donut() %>%    split_plot(by = Year) energy_week %>%    tidyplot(Date, power_in_gw, color = energy_source) %>%    add_line() %>%    adjust_size(80, 60) %>%    adjust_expansion(all = 0) energy_week %>%    tidyplot(Date, power_in_gw, fill = energy_source, color = energy_source) %>%    add_area(alpha = 0.3) %>%    adjust_size(80, 60) energy_week %>%    tidyplot(Date, power_in_gw, fill = energy_source, color = energy_source) %>%    add_areastack_absolute(alpha = 0.3) %>%    adjust_size(80, 60) energy_week %>%    tidyplot(Date, power_in_gw, fill = energy_source, color = energy_source) %>%    add_areastack_relative(alpha = 0.3) %>%    adjust_size(80, 60) ###  energy %>%    tidyplot(Year, power_in_gw, fill = energy_type) %>%    add_barstack_absolute() %>%    adjust_size(80, 60) energy %>%    tidyplot(Year, power_in_gw, fill = energy_type) %>%    add_barstack_relative() %>%    adjust_size(80, 60) my_colors <- c(\"Fossil\" = \"grey\",                \"Nuclear\" = \"#F6C54D\",                \"Renewable\" = \"#4FAE62\",                \"Other\" = \"#C02D45\")  energy %>%    filter(Year %in% c(2005, 2010, 2015, 2020)) %>%    tidyplot(y = power_in_gw, fill = energy_type) %>%    add_pie() %>%    adjust_colors(colors = my_colors) %>%    split_plot(by = Year) energy %>%    filter(Year %in% c(2005, 2010, 2015, 2020)) %>%    tidyplot(y = power_in_gw, fill = energy_type) %>%    add_donut()  %>%    adjust_colors(colors = my_colors) %>%     split_plot(by = Year) energy %>%    filter(Year %in% c(2005, 2010, 2015, 2020)) %>%    filter(energy_type != \"Other\") %>%    mutate(Year = factor(Year)) %>%    tidyplot(x = Year, y = power_in_gw, fill = energy_type, color) %>%    add_sum_bar() %>%   adjust_colors(colors = my_colors) %>%    adjust_size(50) energy_week %>%    tidyplot(Date, power_in_gw, color = energy_type) %>%    add_line() %>%    adjust_size(80, 60) %>%    adjust_expansion(all = 0) energy_week %>%    summarise(power_in_gw = sum(power_in_gw), .by = c(Date, energy_type)) %>%    tidyplot(Date, power_in_gw, fill = energy_type, color = energy_type) %>%    add_area(alpha = 0.3) %>%    adjust_size(80, 60) energy_week %>%    summarise(power_in_gw = sum(power_in_gw), .by = c(Date, energy_type)) %>%    tidyplot(Date, power_in_gw, fill = energy_type, color = energy_type) %>%    add_areastack_absolute(alpha = 0.3) %>%    adjust_size(80, 60) energy_week %>%   summarise(power_in_gw = sum(power_in_gw), .by = c(Date, energy_type)) %>%    tidyplot(Date, power_in_gw, fill = energy_type, color = energy_type) %>%    add_areastack_relative(alpha = 0.3) %>%    adjust_size(80, 60)"},{"path":[]},{"path":"https://jbengler.github.io/tidyplots/articles/Visualizing-data.html","id":"xy-relationships","dir":"Articles","previous_headings":"","what":"x–y relationships","title":"Visualizing Data","text":"","code":"mtcars %>%   tibble::as_tibble(rownames = \"name\") %>%    tidyplot(mpg, disp) %>%    add_scatter() %>%    add_scatter(subset_data = . %>% dplyr::filter(disp > 350), color = \"red\") %>%    add_label(subset_data = . %>% dplyr::filter(disp > 350), var = name) %>%    add_reference_lines(x = c(20, 30), y = c(200, 350)) %>%    adjust_size(70, 70) energy_week %>%    tidyplot(Date, power_in_gw, color = energy_source) %>%    add_line() %>%    adjust_size(80, 60) %>%    adjust_expansion(all = 0) energy_week %>%    tidyplot(Date, power_in_gw, fill = energy_source, color = energy_source) %>%    add_area(alpha = 0.3) %>%    adjust_size(80, 60)"},{"path":"https://jbengler.github.io/tidyplots/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jan Broder Engler. Author, maintainer.","code":""},{"path":"https://jbengler.github.io/tidyplots/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Engler J (2023). tidyplots: Tidy Plots Using Pipe. https://github.com/jbengler/tidyplots, https://jbengler.github.io/tidyplots/.","code":"@Manual{,   title = {tidyplots: Tidy Plots Using the Pipe},   author = {Jan Broder Engler},   year = {2023},   note = {https://github.com/jbengler/tidyplots, https://jbengler.github.io/tidyplots/}, }"},{"path":"https://jbengler.github.io/tidyplots/index.html","id":"tidyplots","dir":"","previous_headings":"","what":"Tidy Plots Using the Pipe","title":"Tidy Plots Using the Pipe","text":"goal tidyplots make ridiculously simple create ready--use scientific plots gradually adding adjusting plot components. follows similar logic ggplot2, uses pipe %>% instead +, allows flexible powerful workflows. Moreover, tidyplots making common scientific plotting routines accessible, proving clean minimalist interface. Finally, fully compatible ggplot code.","code":""},{"path":"https://jbengler.github.io/tidyplots/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tidy Plots Using the Pipe","text":"can install development version tidyplots GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"jbengler/tidyplots\")"},{"path":"https://jbengler.github.io/tidyplots/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Tidy Plots Using the Pipe","text":"basic example shows solve common problem:","code":"library(tidyplots)  df_demo %>%    tidyplot(x = category, y = value, color = category, fill = category) %>%    add_mean_bar(alpha = 0.3) %>%    add_error() %>%    add_jitter()"},{"path":"https://jbengler.github.io/tidyplots/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn more","title":"Tidy Plots Using the Pipe","text":"https://jbengler.github.io/tidyplots/","code":""},{"path":"https://jbengler.github.io/tidyplots/reference/data_exprs.html","id":null,"dir":"Reference","previous_headings":"","what":"Expression data from RNA-Seq study. — data_exprs","title":"Expression data from RNA-Seq study. — data_exprs","text":"data taken form RNA-Seq study investigating regulation genes response central nervous system inflammation.","code":""},{"path":"https://jbengler.github.io/tidyplots/reference/data_exprs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expression data from RNA-Seq study. — data_exprs","text":"","code":"data_exprs"},{"path":"https://jbengler.github.io/tidyplots/reference/data_exprs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Expression data from RNA-Seq study. — data_exprs","text":"data frame 800 rows 9 variables: ensembl_gene_id Ensembl gene id external_gene_name Gene symbol sample Sample name expression Normalized RNA-Seq expression value group Experimental group sample_type Sample type. Either input IP. condition Condition sampling. Either healthy EAE. is_immune_gene Gene annotated immune cell gene. Either yes . direction Direction regulation. Either .","code":""},{"path":"https://jbengler.github.io/tidyplots/reference/data_exprs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Expression data from RNA-Seq study. — data_exprs","text":"data_exprs represents just small subset data aquired study. details study can found Nature Neuroscience, Bassoon proteinopathy drives neurodegeneration multiple sclerosis complete raw data can downloaded Gene Expression Omnibus, study accession GSE104899","code":""},{"path":"https://jbengler.github.io/tidyplots/reference/save_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Save multipage layout to file — save_plot","title":"Save multipage layout to file — save_plot","text":"function takes ggplot list ggplots writes (multipage) file. See details.","code":""},{"path":"https://jbengler.github.io/tidyplots/reference/save_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save multipage layout to file — save_plot","text":"","code":"save_plot(   gg = last_plot(),   filename,   device = NULL,   path = NULL,   scale = 1,   width = NA,   height = NA,   units = c(\"mm\", \"cm\", \"in\"),   dpi = 300,   limitsize = TRUE,   return_input = TRUE,   multiple_files = FALSE,   bg = \"transparent\",   ... )"},{"path":"https://jbengler.github.io/tidyplots/reference/save_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save multipage layout to file — save_plot","text":"gg ggplot list ggplots filename File name create disk. device Device use. Can either device function (e.g. png), one \"eps\", \"ps\", \"tex\" (pictex), \"pdf\", \"jpeg\", \"tiff\", \"png\", \"bmp\", \"svg\" \"wmf\" (windows ). path Path directory save plot : path filename combined create fully qualified file name. Defaults working directory. scale Multiplicative scaling factor. width, height Dimensions saved plot. specified, save_multipage() try infer dimensions incoming ggplot object. incoming ggplot object absolute dimensions, system default device dimensions used. units Unit dimensions. Defaults \"mm\". dpi Plot resolution. Also accepts string input: \"retina\" (320), \"print\" (300), \"screen\" (72). Applies raster output types. limitsize TRUE (default), ggsave() save images larger 50x50 inches, prevent common error specifying dimensions pixels. return_input Return input ggplot plotlist saving. enables use within dplyr pipes. multiple_files Save pages individal files. bg Background colour. NULL, uses plot.background fill value plot theme. ... arguments passed graphics device function, specified device.","code":""},{"path":"https://jbengler.github.io/tidyplots/reference/save_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save multipage layout to file — save_plot","text":"Handling multiple pages. list ggplots, list element rendered separate page mutipage pdf file. save pages individual files, use multiple_files = TRUE. output formats support multipage files (png, jpg, etc), pages saved individual files default. Handling file dimensions. Output file dimensions determined according following precedence. width height parameters save_multipage(). Dimensions inferred incoming ggplot object containing absolute dimensions. System default device dimensions.","code":""},{"path":"https://jbengler.github.io/tidyplots/reference/split_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"split_plot — split_plot","title":"split_plot — split_plot","text":"split_plot","code":""},{"path":"https://jbengler.github.io/tidyplots/reference/split_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"split_plot — split_plot","text":"","code":"split_plot(   gg,   by,   ncol = NULL,   nrow = NULL,   byrow = NULL,   widths = 30,   heights = 25,   guides = \"collect\",   tag_level = NULL,   design = NULL,   my_unit = \"mm\" )"},{"path":"https://jbengler.github.io/tidyplots/reference/split_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"split_plot — split_plot","text":"gg ggplot Variable used faceting. ncol, nrow number columns rows per page. byrow Analogous byrow matrix(). FALSE plots filled column-major order widths, heights relative widths heights column row grid. get repeated match dimensions grid. special value NA/-1null behave 1null unless fixed aspect plot inserted case allow dimension expand contract match aspect ratio content guides string specifying guides treated layout. 'collect' collect guides given nesting level, removing duplicates. 'keep' stop collection level let guides placed alongside plot. auto allow guides collected upper level tries, place alongside plot .  modify default guide \"position\" theme(legend.position=...) also collecting guides must apply change overall patchwork (see example). tag_level string ('keep' 'new') indicate auto-tagging behave. See plot_annotation(). design Specification location areas layout. Can either specified text string concatenating calls area() together. See examples information use.","code":""}]
